import torch
import os
import matplotlib.pyplot as plt
import seaborn as sns
from torch.optim.lr_scheduler import ReduceLROnPlateau
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
import numpy as np
from IPython.display import clear_output
from datetime import datetime
import pandas as pd

# Create a subfolder with the current date and time
current_time = datetime.now().strftime("%Y%m%d-%H%M%S")
checkpoint_dir = f'/content/checkpoints/{current_time}'
os.makedirs(checkpoint_dir, exist_ok=True)

# Set parameters for early stopping
early_stopping_patience = 50
best_val_loss = float('inf')
patience_counter = 0

# Initialize learning rate scheduler
scheduler = ReduceLROnPlateau(optimizer, mode='min', factor=0.1, patience=3)
'''
The Model reduces the learning rate by a factor of 0.1 after the learning stagnates.

'''
# For plotting and saving metrics
train_losses = []
val_losses = []
train_accuracies = []
val_accuracies = []

def check_for_nan(tensor, name="tensor"):
    if torch.isnan(tensor).any() or torch.isinf(tensor).any():
        print(f"NaN or Inf detected in {name}")

def save_checkpoint(state, is_best, filename):
    if is_best:
        torch.save(state, filename)
        print("Best model checkpoint saved!")

'''
Training Loop:
- for epoch in range(num_epochs):: Iterating through a specified number of epochs (150 in this case).
- model.train(): Sets the model to training mode.
- Loop over batches from train_loader.
- outputs = model(spectrograms): Forward pass to obtain model predictions.
- targets = targets.unsqueeze(1).float(): Adjusting the shape of target tensor.
- loss = criterion(outputs, labels): Calculating the binary cross-entropy loss.
- Backward pass, gradient update, and learning rate adjustment.
'''
num_epochs = 150
max_norm = 1.0  # For gradient clipping

for epoch in range(num_epochs):
    model.train()
    running_loss = 0.0
    correct_train = 0
    total_train = 0
    for spectrograms, labels in tqdm(train_loader):
        spectrograms, labels = spectrograms.to(device), labels.to(device)

        # Debugging statements
        print(f"Epoch {epoch + 1}/{num_epochs}")
        #print(f"Spectrograms shape: {spectrograms.shape}")
        #print(f"Labels shape: {labels.shape}")


        # Forward pass
        outputs = model(spectrograms)

        # Debugging statements
        #print(f"Outputs shape: {outputs.shape}")

        loss = criterion(outputs, labels)

        # Debugging statements
        print(f"Loss value: {loss.item()}")

        # Check for NaNs/Infs
        #check_for_nan(spectrograms, "spectrograms")
        #check_for_nan(outputs, "outputs")
        #check_for_nan(loss, "loss")

        # Backward pass and optimization
        optimizer.zero_grad()
        loss.backward()

        # Gradient clipping
        torch.nn.utils.clip_grad_norm_(model.parameters(), max_norm)

        optimizer.step()

        running_loss += loss.item()

        _, predicted_train = torch.max(outputs.data, 1)
        total_train += labels.size(0)
        correct_train += (predicted_train == labels).sum().item()

    avg_train_loss = running_loss / len(train_loader)
    train_losses.append(avg_train_loss)
    train_accuracy = 100 * correct_train / total_train
    train_accuracies.append(train_accuracy)
    # Print loss for monitoring
    print(f"Epoch [{epoch+1}/{num_epochs}], Loss: {avg_train_loss:.4f}, Accuracy: {train_accuracy:.2f}%")

    # Validation loop
    '''
    Evaluation metrics
    - model.eval(): Sets the model to evaluation mode.
    - with torch.no_grad(): disables gradient computation during evaluation.
    - outputs = model(spectrograms): Forward pass on the test set.
    - _predicted = (outputs >= 1).float(): Converting 
      model probabilities to binary predictions using a threshold of 0.5.
    - accuracy = (test_predictions == Y_test_tensor).float().mean().item(): 
      Calculating accuracy based on binary predictions and true labels.
    '''
    model.eval()
    val_loss = 0.0
    correct = 0
    total = 0
    all_preds = []
    all_labels = []
    with torch.no_grad():
        for spectrograms, labels in valid_loader:
            spectrograms, labels = spectrograms.to(device), labels.to(device)


            # Forward pass
            outputs = model(spectrograms)
            loss = criterion(outputs, labels)

            # Check for NaNs/Infs
            #check_for_nan(spectrograms, "spectrograms (val)")
            #check_for_nan(outputs, "outputs (val)")
            #check_for_nan(loss, "loss (val)")

            val_loss += loss.item()

            _, predicted = torch.max(outputs.data, 1)
            total += labels.size(0)
            correct += (predicted == labels).sum().item()

            all_preds.extend(predicted.cpu().numpy())
            all_labels.extend(labels.cpu().numpy())

    avg_val_loss = val_loss / len(valid_loader)
    val_losses.append(avg_val_loss)
    val_accuracy = 100 * correct / total
    val_accuracies.append(val_accuracy)
    print(f"Validation Loss: {avg_val_loss:.4f}, Accuracy: {val_accuracy:.2f}%")

    # Step the scheduler
    scheduler.step(avg_val_loss)

    # Check for improvement
    is_best = avg_val_loss < best_val_loss
    if is_best:
        best_val_loss = avg_val_loss
        patience_counter = 0
        # Save the checkpoint
        checkpoint_path = os.path.join(checkpoint_dir, 'best_model.pth')
        save_checkpoint({
            'epoch': epoch + 1,
            'model_state_dict': model.state_dict(),
            'optimizer_state_dict': optimizer.state_dict(),
            'scheduler_state_dict': scheduler.state_dict(),
            'loss': avg_val_loss,
        }, is_best, checkpoint_path)
    else:
        patience_counter += 1

    # Check early stopping condition
    if patience_counter >= early_stopping_patience:
        print("Early stopping triggered")
        break

    # Live plot of training and validation loss
    clear_output(wait=True)
    plt.figure(figsize=(10, 5))
    plt.plot(train_losses, label='Training Loss')
    plt.plot(val_losses, label='Validation Loss')
    plt.xlabel('Epoch')
    plt.ylabel('Loss')
    plt.legend()
    plt.title(f"Epoch [{epoch+1}/{num_epochs}], Loss: {avg_train_loss:.4f}\n" + f"Validation Loss: {avg_val_loss:.4f}, Accuracy: {val_accuracy:.2f}%")
    plt.show()

# Restore the best model weights
best_checkpoint = os.path.join(checkpoint_dir, 'best_model.pth')
checkpoint = torch.load(best_checkpoint)
model.load_state_dict(checkpoint['model_state_dict'])
optimizer.load_state_dict(checkpoint['optimizer_state_dict'])
scheduler.load_state_dict(checkpoint['scheduler_state_dict'])
print("Restored best model weights from checkpoint")

# Confusion Matrix
cm = confusion_matrix(all_labels, all_preds)
disp = ConfusionMatrixDisplay(confusion_matrix=cm)
disp.plot(cmap=plt.cm.Blues)
plt.title('Confusion Matrix')
plt.show()

# Plot final training and validation loss curves
plt.figure(figsize=(10, 5))
plt.plot(train_losses, label='Training Loss')
plt.plot(val_losses, label='Validation Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.title('Training and Validation Loss')
final_graph_path = os.path.join(checkpoint_dir, 'training_validation_loss.png')
plt.savefig(final_graph_path)
plt.show()

# Save the metrics history to a CSV file
metrics_df = pd.DataFrame({
    'epoch': range(1, len(train_losses) + 1),
    'train_loss': train_losses,
    'val_loss': val_losses,
    'train_accuracy': train_accuracies,
    'val_accuracy': val_accuracies
})
metrics_csv_path = os.path.join(checkpoint_dir, 'training_metrics.csv')
metrics_df.to_csv(metrics_csv_path, index=False)
print(f"Saved training metrics to {metrics_csv_path}")