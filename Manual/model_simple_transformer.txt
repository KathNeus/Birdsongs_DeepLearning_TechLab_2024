import torch.nn as nn
import torch

class AudioTransformer(nn.Module):
    def __init__(self, input_dim, num_classes, num_heads=8, num_layers=6, dropout=0.1, epsilon=1e-6):
        super(AudioTransformer, self).__init__()
        self.input_dim = input_dim
        self.num_classes = num_classes
        self.epsilon = epsilon
        self.model_type = 'Transformer'
        self.encoder = nn.Linear(input_dim, input_dim)
        self.pos_encoder = PositionalEncoding(input_dim, dropout)
        encoder_layers = nn.TransformerEncoderLayer(input_dim, num_heads, input_dim*2, dropout)
        self.transformer_encoder = nn.TransformerEncoder(encoder_layers, num_layers)
        self.norm = nn.LayerNorm(input_dim)  # Add normalization layer
        self.decoder = nn.Linear(input_dim, num_classes)

    def forward(self, src):
        if src.dim() == 4:  # Handle the case where the input has a channel dimension
            src = src.squeeze(1)  # Remove the channel dimension (batch_size, channels, input_dim, seq_length) -> (batch_size, input_dim, seq_length)

        # Replace NaNs and Infs with zeros
        src = torch.where(torch.isnan(src), torch.zeros_like(src), src)
        src = torch.where(torch.isinf(src), torch.zeros_like(src), src)

        # Scale the input
        mean = torch.mean(src, dim=[0, 1, 2], keepdim=True)
        std = torch.std(src, dim=[0, 1, 2], keepdim=True) + self.epsilon
        src = (src - mean) / std

        src = src.permute(2, 0, 1)  # (batch_size, input_dim, seq_length) -> (seq_length, batch_size, input_dim)
        src = self.encoder(src) * torch.sqrt(torch.tensor(self.input_dim, dtype=torch.float32))
        src = self.pos_encoder(src)
        src = self.transformer_encoder(src)
        src = self.norm(src)  # Apply normalization
        output = src.mean(dim=0)  # Aggregate sequence output
        output = self.decoder(output)
        return output

class PositionalEncoding(nn.Module):
    def __init__(self, d_model, dropout=0.1, max_len=5000):
        super(PositionalEncoding, self).__init__()
        self.dropout = nn.Dropout(p=dropout)
        self.d_model = d_model

        pe = torch.zeros(max_len, d_model)
        position = torch.arange(0, max_len, dtype=torch.float).unsqueeze(1)
        div_term = torch.exp(torch.arange(0, d_model, 2).float() * (-torch.log(torch.tensor(10000.0)) / d_model))
        pe[:, 0::2] = torch.sin(position * div_term)
        pe[:, 1::2] = torch.cos(position * div_term)
        pe = pe.unsqueeze(0).transpose(0, 1)
        self.register_buffer('pe', pe)

    def forward(self, x):
        x = x + self.pe[:x.size(0), :]
        return self.dropout(x)

# Define the input dimension (number of Mel bands) and the number of classes
input_dim = 128  # This should match the number of Mel bands
num_classes = len(label_encoder.classes_)

# Initialize the model
# Move model to GPU if available
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

model = AudioTransformer(input_dim, num_classes).to(device)
criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(model.parameters(), lr=0.001)

# Print summary of network and how many trainable parameters
print(model)
print(f"Number of trainable parameters: {sum(p.numel() for p in model.parameters() if p.requires_grad)}")