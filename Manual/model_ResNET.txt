from torchvision.models import resnet34
import torch
import torch.nn as nn
import torch.optim as optim
if torch.cuda.is_available():
  device=torch.device('cuda:0')
else:
  device=torch.device('cpu')
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)
model = resnet34(pretrained=True)
model.fc = nn.Linear(512,50)
model.conv1 = nn.Conv2d(1, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
model = model.to(device)
print(model)
print(f"Number of trainable parameters: {4 * sum(p.numel() for p in model.parameters() if p.requires_grad)}")
print(f"Expected memory usage: {4*4 * sum(p.numel() for p in model.parameters() if p.requires_grad)/(1024**2)}")