import os
import shutil
import random
import torch
import torchaudio
import torchaudio.transforms as T
from torch.utils.data import Dataset, DataLoader, random_split
import torch.nn.functional as F
import matplotlib.pyplot as plt
import librosa
import librosa.display
import numpy as np
from sklearn.preprocessing import LabelEncoder
import torchaudio.transforms as T
from tqdm import tqdm

# Define relevant frequency range
relevant_min_freq = 1024
relevant_max_freq = 8192

def calculate_relevant_bins(sample_rate, n_fft, min_freq, max_freq):
'''
    Calculates the bin size using the frequency range within which bird 
    songs are usually found.
    input: 
        sample_rate: sample rate 
        n_fft: the number of samples used in each short time furier transformation window,
        i.e., frequency resolution of the spectrogram
        min_freq: minimal frequency of bird songs
        max_freq: maximal frequency of bird songs
    output:
        min_bin: lower limit of the bin 
        max_bin: upper limit of the bin
'''
    bin_size = sample_rate / n_fft
    min_bin = int(min_freq / bin_size)
    max_bin = int(max_freq / bin_size)
    return min_bin, max_bin

def calculate_length(audio_directory, sample_rate=44100, n_fft=1024, win_length=None, hop_length=512, method='mean'):
'''
    Calculates the length of the signal of each sample (?)
    Ínput:
        audio_directory: path of the audio file location
        sample_rate: sample rate
        n_fft: the number of samples used in each short time furier transformation window,
        i.e., frequency resolution of the spectrogram
        win_length: length of the data over which the algorithm computes the statistics, default = None
        hop_length: distance between consecutative ffts, default = 512
        methode: the average strategy used to calculate the middle value of signal data points
        default = mean
    Output: length: 
'''
    lengths = []
    for root, _, files in os.walk(audio_directory):
        for file in files:
            if file.endswith('.wav'):
                audio_path = os.path.join(root, file)
                waveform, sr = torchaudio.load(audio_path)
                resampler = T.Resample(orig_freq=sr, new_freq=sample_rate)
                waveform = resampler(waveform)

                spectrogram = T.Spectrogram(
                    sample_rate=sample_rate,
                    n_fft=n_fft,
                    win_length=win_length,
                    hop_length=hop_length,
                )(waveform)

                lengths.append(spectrogram.size(2))

    if method == 'mean':
        return int(np.mean(lengths))
    elif method == 'median':
        return int(np.median(lengths))
    else:
        raise ValueError("Method must be 'mean' or 'median'")

def create_spectrogram_dataset(audio_directory, output_directory, sample_rate=44100, n_fft=1024, win_length=None, hop_length=512, min_freq=relevant_min_freq, max_freq=relevant_max_freq):
    """Convert audio files in a directory to spectrograms and save them."""
    if not os.path.exists(output_directory):
        os.makedirs(output_directory)

    for root, _, files in os.walk(audio_directory):
        species = root.split(os.sep)[-1]
        for file in tqdm(files, desc=species):
            if file.endswith('.wav'):
                species_output_dir = os.path.join(output_directory, species)
                if not os.path.exists(species_output_dir):
                    os.makedirs(species_output_dir)

                audio_path = os.path.join(root, file)
                output_path = os.path.join(species_output_dir, file.replace('.wav', '.pt'))

                if os.path.exists(output_path):
                    print(f"Spectrogram for {file} already exists. Skipping conversion.")
                    continue
                '''
                First, torchaudio.load loads audio data - from source -
                as tensor in waveform and the sample rate in sr
                Second, Frequencies are resampled to 44100 if sr is another than 44100Hz.
                '''
                waveform, sr = torchaudio.load(audio_path)
                resampler = T.Resample(orig_freq=sr, new_freq=sample_rate)
                waveform = resampler(waveform)

                '''
                Create a MelSpectrogram transformation focusing on the relevant frequency range
                Mel spectrograms are appropriate for saving space and RAM
                '''
                spectrogram = T.Spectrogram(
                    n_fft=n_fft,
                    win_length=win_length,
                    hop_length=hop_length,
                )(waveform)
                spectrogram = spectrogram[:, min_bin:max_bin-1, :]
                # Save the spectrogram tensor
                torch.save(spectrogram, output_path)
                #print(f"Saved spectrogram to {output_path}")

# Define the dataset class
class BirdsongDataset(Dataset):
    '''
    Class that reads Wav format audio files stored at a specified location.
    label_encoder: text file containing meta data/labels of the files
    max_length = upper limit of the length of the dataset
    spectrogram_dir: directory of the spectrograms
    Output the label encoder & the spectrogram
    The dataset then consists of a set of samples retrieved by the def __len__(), which retrieves 
    the number of samples & def __getitem__(), which wrapps over the datasat, loads each at a time
    and assignes the corresponding label, truncates the spectrogram to the fixed size by padding zeros.

    '''
    def __init__(self, spectrogram_dir, max_length, label_encoder):
        self.spectrogram_dir = spectrogram_dir
        self.max_length = max_length
        self.label_encoder = label_encoder
        self.files = []
        self.labels = []

        for species_dir in os.listdir(spectrogram_dir):
            species_path = os.path.join(spectrogram_dir, species_dir)
            if os.path.isdir(species_path):
                for file in os.listdir(species_path):
                    if file.endswith('.pt'):
                        self.files.append(os.path.join(species_path, file))
                        self.labels.append(species_dir)

    def __len__(self):
        return len(self.files)

    def __getitem__(self, idx):
        spectrogram = torch.load(self.files[idx])
        label = self.labels[idx]
        # Pad or truncate the spectrogram to the fixed length
        if spectrogram.size(2) > self.max_length:
            spectrogram = spectrogram[:, :, :self.max_length]
        else:
            pad_amount = self.max_length - spectrogram.size(2)
            spectrogram = F.pad(spectrogram, (0, pad_amount))

        #label = self.label_encoder.transform([label])[0]
        return spectrogram, label

def visualize_spectrogram(spectrogram, title="Spectrogram"):
    """Visualize a spectrogram in the notebook."""
    spectrogram = spectrogram.numpy()
    plt.figure(figsize=(10, 4))
    librosa.display.specshow(librosa.power_to_db(spectrogram[0], ref=np.max), sr=44100, hop_length=512, y_axis='freq', fmin=1025, fmax=8192, x_axis='time')
    plt.colorbar(format='%+2.0f dB')
    plt.title(title)
    plt.tight_layout()
    plt.show()

def collate_fn(batch):
    '''
    Padds 0 or truncates the spectrograms to an equal size. Sepctrograms are returned as stacks 
    (sequence of tensors concatenated using an additional dimension), labels as tensors.
    '''
    """Collate function to pad/truncate spectrograms to the same size."""
    spectrograms, labels = zip(*batch)

    # Check if any spectrograms are empty
    #print(max_length)
    #max_length = max([s.size(2) for s in spectrograms])
    #print(max_length)
    padded_spectrograms = []
    for s in spectrograms:
        if s.size(2) == 0:
            print("Found an empty spectrogram.")
            continue
        if s.size(2) > max_length:
            s = s[:, :, :max_length]
        else:
            pad_amount = max_length - s.size(2)
            s = F.pad(s, (0, pad_amount))
        padded_spectrograms.append(s)

    if len(padded_spectrograms) == 0:
        raise RuntimeError("All spectrograms are empty.")


    if isinstance(labels[0], str):
        unique_labels = list(set(labels))
        label_to_index = {label: index for index, label in enumerate(unique_labels)}
        labels = [label_to_index[label] for label in labels]

    spectrograms = torch.stack(padded_spectrograms)

    labels = torch.tensor(labels[:len(padded_spectrograms)])  # Ensure labels match spectrograms
    return spectrograms, labels

# Define paths
audio_directory = "/content/drive/MyDrive/xenoDL_audio/"  # Change this to your audio files directory
output_directory = "/content/drive/MyDrive/xenoDL/Filtered_spectrograms"  # Change this to your desired output directory

min_bin,max_bin=calculate_relevant_bins(44100,1024,relevant_min_freq,relevant_max_freq)
#shutil.rmtree("/content/xenoDL/Filtered_spectrograms/00GreatTit")
import shutil
import os


'''
cpoies processed spectrograms from google Drive to colab notebook file system
'''
copyfrom_directory="/content/drive/MyDrive/xenoDL/Filtered_spectrograms"
copyto_directory = "/content/xenoDL/Filtered_spectrograms"
for root, _, files in os.walk(copyfrom_directory):
    species = root.split(os.sep)[-1]
    for file in tqdm(files, desc=species):
        if file.endswith('.pt'):
            species_output_dir = os.path.join(copyto_directory, species)
            if not os.path.exists(species_output_dir):
                os.makedirs(species_output_dir)

            input_path = os.path.join(root, file)
            output_path = os.path.join(species_output_dir, file)

            if os.path.exists(output_path):
                print(f"Spectrogram for {output_path} already exists. Skipping copying.")
                continue
            print(f"Copying to {output_path}." )
            shutil.copy(input_path,output_path)


#if os.path.isdir("/content/xenoDL/Filtered_spectrograms"):
#    shutil.rmtree("/content/xenoDL/Filtered_spectrograms")
#shutil.copytree('/content/drive/MyDrive/xenoDL/Filtered_spectrograms', '/content/xenoDL/Filtered_spectrograms')

# Convert audio files to spectrogram dataset
create_spectrogram_dataset(audio_directory, output_directory)

max_length = int(2048)
# Calculate max length for spectrograms
if not "max_length" in globals():
    # Calculate length for spectrograms
    length_method = 'median'  # Change to 'mean' if you want to use the mean length
    length = calculate_length(audio_directory, method=length_method)/6
    print(f"Calculated {length_method} length for spectrograms: {length}")

    max_length = length #calculate_max_length(audio_directory)
print(f"Calculated max length for spectrograms: {max_length}")

# Encode labels
label_encoder = LabelEncoder()
all_species = [species for species in os.listdir(output_directory) if os.path.isdir(os.path.join(output_directory, species))]
label_encoder.fit(all_species)

# Create dataset of spectrograms with calculated max length
dataset = BirdsongDataset(output_directory, max_length=max_length, label_encoder=label_encoder)



def get_sizeGB(start_path = '.'):
    total_size = 0
    filecount=0
    for dirpath, dirnames, filenames in os.walk(start_path):
        for f in filenames:
            fp = os.path.join(dirpath, f)
            # skip if it is symbolic link
            if not os.path.islink(fp):
                total_size += os.path.getsize(fp)
                filecount +=1
    return total_size/(10**9),filecount



directories =[x[0] for x in os.walk("/content/drive/MyDrive/xenoDL/Filtered_spectrograms/")]
for directory in directories:
    print(directory)
    print(get_sizeGB(directory))


directories =[x[0] for x in os.walk("/content/xenoDL/Filtered_spectrograms/")]
for directory in directories:
    print(directory)
    print(get_sizeGB(directory))


import shutil
import os
if os.path.isdir("/content/xenoDL/Filtered_spectrograms"):
    shutil.rmtree("/content/xenoDL/Filtered_spectrograms")
shutil.copytree('/content/drive/MyDrive/xenoDL/Filtered_spectrograms', '/content/xenoDL/Filtered_spectrograms')


