import torch
import torch.nn as nn
import torch.nn.functional as F

'''
same model as the customised but with more hidden layers
'''
class ImprovedCNN(nn.Module):
    def __init__(self, input_dim,max_length, num_classes):
        super(ImprovedCNN, self).__init__()
        self.conv1 = nn.Conv2d(1, 64, kernel_size=(3, 3), padding=1)
        self.bn1 = nn.BatchNorm2d(64)
        self.conv2 = nn.Conv2d(64, 128, kernel_size=(3, 3), padding=1)
        self.bn2 = nn.BatchNorm2d(128)
        self.conv3 = nn.Conv2d(128, 256, kernel_size=(3, 3), padding=1)
        self.bn3 = nn.BatchNorm2d(256)
        self.conv4 = nn.Conv2d(256, 512, kernel_size=(3, 3), padding=1)
        self.bn4 = nn.BatchNorm2d(512)
        self.conv5 = nn.Conv2d(512, 1024, kernel_size=(3, 3), padding=1)
        self.bn5 = nn.BatchNorm2d(1024)
        self.dropout = nn.Dropout(0.5)
        self.global_avg_pool = nn.AdaptiveAvgPool2d((1, 1))
        self._calculate_flatten_size(input_dim=input_dim,max_length=max_length)

        self.fc1 = nn.Linear(self.flatten_size, 512)
        self.fc2 = nn.Linear(512, num_classes)

    def _calculate_flatten_size(self, input_dim, max_length):
        with torch.no_grad():
            print("max length: "+str(max_length))
            x = torch.zeros(1, 1, input_dim, max_length)
            x = F.relu(self.bn1(self.conv1(x)))
            x = F.max_pool2d(x, (2, 2))
            x = F.relu(self.bn2(self.conv2(x)))
            x = F.max_pool2d(x, (2, 2))
            x = F.relu(self.bn3(self.conv3(x)))
            x = F.max_pool2d(x, (2, 2))
            x = F.relu(self.bn4(self.conv4(x)))
            x = F.max_pool2d(x, (2, 2))
            x = F.relu(self.bn5(self.conv5(x)))
            x = self.global_avg_pool(x)
            self.flatten_size = x.view(1, -1).size(1)
            print("x numel:"+str(x.numel()))
            print("flatten size: "+str(self.flatten_size))

    def forward(self, x):
        x = F.relu(self.bn1(self.conv1(x)))
        x = F.max_pool2d(x, (2, 2))
        x = F.relu(self.bn2(self.conv2(x)))
        x = F.max_pool2d(x, (2, 2))
        x = F.relu(self.bn3(self.conv3(x)))
        x = F.max_pool2d(x, (2, 2))
        x = F.relu(self.bn4(self.conv4(x)))
        x = F.max_pool2d(x, (2, 2))
        x = F.relu(self.bn5(self.conv5(x)))
        x = self.global_avg_pool(x)
        x = x.view(x.size(0), -1)
        x = self.dropout(x)
        x = F.relu(self.fc1(x))
        x = self.dropout(x)  # Added an extra dropout layer
        x = self.fc2(x)
        return x

# Define the input dimension (number of Mel bands) and the number of classes
torch.cuda.empty_cache()
input_dim = 166  # This should match the number of Mel bands
num_classes = len(label_encoder.classes_)

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

# Initialize the model
model = ImprovedCNN(input_dim=input_dim,max_length=max_length, num_classes=num_classes).to(device)
#model.to(xla.device())
criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(model.parameters(), lr=1e-5, weight_decay=1e-4)

# Print summary of network and how many trainable parameters
print(model)
print(f"Number of trainable parameters: {sum(p.numel() for p in model.parameters() if p.requires_grad)}")
print(f"Expected memory usage (MB): {4*4 * sum(p.numel() for p in model.parameters() if p.requires_grad)/(1024**2)}")